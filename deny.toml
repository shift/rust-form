# Security and license configuration for cargo-deny

[graph]
# All features disabled by default
all-features = false
# No features enabled by default  
no-default-features = false
# Specific features to enable
features = []

[licenses]
# We want really high confidence when determining the license of a crate
confidence-threshold = 0.93
# List of explicitly allowed licenses
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
    "CC0-1.0",
]
# List of explicitly disallowed licenses
deny = [
    "GPL-2.0",
    "GPL-3.0", 
    "AGPL-1.0",
    "AGPL-3.0",
]
# Lint level for when multiple versions of the same license are detected
multiple-versions = "warn"
# Some crates don't have (easily) machine readable licensing information,
# adding a clarification or license text here will make cargo-deny accept those
[[licenses.clarify]]
name = "ring"
# SPDX identifier for the license
expression = "MIT AND ISC AND OpenSSL"
# One or more files in the crate's source used as the "source of truth" for
# the license expression. Files are checked during crate publish.
license-files = [
    { path = "LICENSE", hash = 0xbd0eed23 }
]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
highlight = "all"
# List of crates that are allowed
allow = []
# List of crates to deny
deny = [
    # Each entry can either be just the crate name to deny all versions of the crate
    { name = "openssl-sys", reason = "Use rustls instead" },
    { name = "openssl", reason = "Use rustls instead" },
    # Or a more specific entry
    { name = "time", version = "<0.3.0", reason = "Use time 0.3.0 or later" },
]
# Certain crates/versions that will be skipped when doing duplicate detection.
skip = []
# Similarly to `skip` allows you to skip certain crates from being checked. Unlike `skip`,
# `skip-tree` skips the crate and all of its dependencies entirely.
skip-tree = []

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url of the advisory database to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for security vulnerabilities
vulnerability = "deny"
# The lint level for unmaintained crates
unmaintained = "warn"
# The lint level for crates that have been yanked from their source registry
yanked = "warn"
# The lint level for crates with security notices
notice = "warn"
# A list of advisory IDs to ignore
ignore = []
# Threshold for security vulnerabilities, any vulnerability with a CVSS score
# lower than this value will be ignored
severity-threshold = "low"

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"
# List of allowed registries
allow-registry = ["https://github.com/rust-lang/crates.io-index"]
# List of allowed Git repositories
allow-git = []