name: Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy (optional)'
        required: false
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      should_deploy: ${{ steps.env.outputs.should_deploy }}
    steps:
    - name: Determine deployment environment
      id: env
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "environment=none" >> $GITHUB_OUTPUT
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi

  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.should_deploy == 'true'
    outputs:
      image: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [determine-environment, build-container]
    if: needs.determine-environment.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.rust-form.dev
    steps:
    - name: Deploy to staging
      run: |
        echo "üöÄ Deploying to staging environment"
        echo "Image: ${{ needs.build-container.outputs.image }}"
        echo "Digest: ${{ needs.build-container.outputs.digest }}"
        
        # Here you would add your deployment logic
        # Examples:
        # - Update Kubernetes manifests
        # - Deploy to cloud provider
        # - Update configuration
        
        # Placeholder deployment
        echo "‚úÖ Staging deployment completed"
        
    - name: Run health checks
      run: |
        echo "üè• Running health checks..."
        
        # Wait for deployment to be ready
        sleep 30
        
        # Example health check (replace with actual endpoint)
        # curl -f https://staging.rust-form.dev/health || exit 1
        
        echo "‚úÖ Health checks passed"
        
    - name: Run smoke tests
      run: |
        echo "üß™ Running smoke tests..."
        
        # Example smoke tests
        # You could run a subset of your test suite against the deployed service
        
        echo "‚úÖ Smoke tests passed"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [determine-environment, build-container]
    if: needs.determine-environment.outputs.environment == 'production'
    environment:
      name: production
      url: https://rust-form.dev
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production environment"
        echo "Image: ${{ needs.build-container.outputs.image }}"
        echo "Digest: ${{ needs.build-container.outputs.digest }}"
        
        # Production deployment logic
        # This should be more careful and include:
        # - Blue/green deployment
        # - Rollback capability
        # - Comprehensive monitoring
        
        echo "‚úÖ Production deployment completed"
        
    - name: Run health checks
      run: |
        echo "üè• Running production health checks..."
        
        # Wait for deployment to be ready
        sleep 60
        
        # More comprehensive health checks for production
        # curl -f https://rust-form.dev/health || exit 1
        
        echo "‚úÖ Production health checks passed"
        
    - name: Run production tests
      run: |
        echo "üß™ Running production verification tests..."
        
        # Run production-safe tests
        # These should not modify data or cause disruption
        
        echo "‚úÖ Production tests passed"

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    if: always()
    needs: [determine-environment, build-container, deploy-staging, deploy-production]
    steps:
    - name: Deployment notification
      run: |
        ENVIRONMENT="${{ needs.determine-environment.outputs.environment }}"
        
        if [[ "$ENVIRONMENT" == "staging" ]]; then
          STATUS="${{ needs.deploy-staging.result }}"
        elif [[ "$ENVIRONMENT" == "production" ]]; then
          STATUS="${{ needs.deploy-production.result }}"
        else
          STATUS="skipped"
        fi
        
        echo "üì¢ Deployment Summary:"
        echo "- Environment: $ENVIRONMENT"
        echo "- Status: $STATUS"
        echo "- Image: ${{ needs.build-container.outputs.image }}"
        
        if [[ "$STATUS" == "success" ]]; then
          echo "‚úÖ Deployment to $ENVIRONMENT successful"
        elif [[ "$STATUS" == "failure" ]]; then
          echo "‚ùå Deployment to $ENVIRONMENT failed"
        else
          echo "‚è≠Ô∏è Deployment skipped"
        fi